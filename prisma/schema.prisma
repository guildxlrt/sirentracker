generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DB_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  email    String @unique
  password String

  Artist Artist[]
  Fan    Fan[]
}

model Admin {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  name     String @unique
  email    String @unique
  password String

  Comment Comment[]
}

model Artist {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  name      String
  bio       String?
  avatarUrl String?
  members   String[]
  genres    String[]

  user_auth_id Int
  user         User @relation(fields: [user_auth_id], references: [id], onDelete: Cascade)

  Release Release[]
  Song    Song[]
  Comment Comment[]
  Post    Post[]
}

model Fan {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  name      String
  bio       String?
  avatarUrl String?

  user_auth_id Int
  user         User @relation(fields: [user_auth_id], references: [id], onDelete: Cascade)

  Order   Order[]
  Comment Comment[]
}

model Order {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  release_id Int
  release    Release @relation(fields: [release_id], references: [id], onDelete: Cascade)
  fan_id     Int
  fan        Fan     @relation(fields: [fan_id], references: [id], onDelete: Cascade)
  amount     Int
}

model Release {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  title       String
  releaseType String
  descript    String?
  price       Int?
  genres      String[]
  songs       Int[]
  coverUrl    String?

  artist_id Int
  artist    Artist @relation(fields: [artist_id], references: [id], onDelete: Cascade)

  Song    Song[]
  Order   Order[]
  Comment Comment[]
}

model Song {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  title     String
  audioUrl  String
  featuring Int[]
  lyrics    String?

  artist_id  Int
  artist     Artist  @relation(fields: [artist_id], references: [id], onDelete: Cascade)
  release_id Int
  release    Release @relation(fields: [release_id], references: [id], onDelete: Cascade)
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  title    String
  text     String?
  imageUrl String?
  videoUrl String?

  artist_id Int
  artist    Artist @relation(fields: [artist_id], references: [id], onDelete: Cascade)

  Comment Comment[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  content String

  // USER ID
  admin_id  Int
  admin     Admin  @relation(fields: [admin_id], references: [id], onDelete: Cascade)
  artist_id Int
  artist    Artist @relation(fields: [artist_id], references: [id], onDelete: Cascade)
  fan_id    Int
  fan       Fan    @relation(fields: [fan_id], references: [id], onDelete: Cascade)

  // TARGET ID
  release_id Int
  release    Release @relation(fields: [release_id], references: [id], onDelete: Cascade)
  post_id    Int
  post       Post    @relation(fields: [post_id], references: [id], onDelete: Cascade)
}
